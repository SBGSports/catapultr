% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ofCloud.R
\name{ofCloudGetActivitySensorData}
\alias{ofCloudGetActivitySensorData}
\alias{ofCloudGetPeriodSensorData}
\alias{ofCloudGetActivitySensorDataEx}
\alias{ofCloudGetPeriodSensorDataEx}
\alias{ofCloudGetMixedPeriodsActivitySensorData}
\title{get 10 Hz sensor and positional data for a given athlete and a given activity or period}
\usage{
ofCloudGetActivitySensorData(
  credentials,
  athlete_id,
  activity_id,
  from = NA,
  to = NA,
  stream_type = NA,
  parameters = NA,
  field = NULL,
  page_ordinal = NA,
  page_size = NA
)

ofCloudGetPeriodSensorData(
  credentials,
  athlete_id,
  period_id,
  from = NA,
  to = NA,
  stream_type = NA,
  parameters = NA,
  field = NULL,
  page_ordinal = NA,
  page_size = NA
)

ofCloudGetActivitySensorDataEx(
  credentials,
  athlete_ids,
  activity_id,
  from = NA,
  to = NA,
  stream_type = NA,
  parameters = NA,
  field = NULL,
  page_ordinal = NA,
  page_size = NA
)

ofCloudGetPeriodSensorDataEx(
  credentials,
  athlete_ids,
  period_id,
  from = NA,
  to = NA,
  stream_type = NA,
  parameters = NA,
  field = NULL,
  page_ordinal = NA,
  page_size = NA
)

ofCloudGetMixedPeriodsActivitySensorData(
  credentials,
  athlete_id,
  activity_id,
  from = NA,
  to = NA,
  parameters = NA,
  field = NULL
)
}
\arguments{
\item{credentials}{as returned by \code{\link{ofCloudGetToken}}, \code{\link{safe_ofCloudGetToken}} or \code{\link{safe_ofCloudGetTokenEx}}}

\item{athlete_id}{athlete id as returned by \code{\link{ofCloudGetAthletes}}, \code{\link{ofCloudGetAthletesInActivity}}, \code{\link{ofCloudGetAthletesInPeriod}}, 
\code{\link{ofCloudGetAthleteDevicesInActivity}} or \code{\link{ofCloudGetAthleteDevicesInPeriod}}}

\item{activity_id}{activity id as returned by \code{\link{ofCloudGetActivities}}}

\item{from, to}{POSIX time in seconds since the start of the epoch, \code{NA} by default,
can be specified either as \code{(from, to)} or as a half-open interval \code{(from,)} / \code{(,to)}.
If \code{from} is not \code{NA}, then only data with the \code{start time >= from} are returned.
If \code{to} is not \code{NA}, then only data with the \code{end_time <= to} are returned.}

\item{stream_type}{\code{"gps"} or \code{"lps"}, \code{NA} by default, designating the activity's or period's stream type to return 
data for. This parameter is meaningful for dual stream devices only (like VECTOR device), assuming activity's or period's 
stream type is valid.}

\item{parameters}{a vector of character strings with required parameters to return. Valid parameters are\cr
\code{"ts"}, \code{"cs"}: POSIX time in seconds since the start of the epoch, observation time offset in centiseconds\cr
\code{"lat"}, \code{"long"}, \code{"alt"}: latitude, longitude (degrees), altitude (meters)\cr
\code{"xy"}: field \code{x} and \code{y} coordinates (metres)\cr
\code{"o"}: odometer (meters)\cr
\code{"v"}, \code{"rv"}: velocity, raw velocity (metres per second)\cr
\code{"a"}: acceleration (metres per second per second)\cr
\code{"hr"}: heart rate (beats per minute)\cr
\code{"pl"}, \code{"sl"}: Accumulated Player Load, smoothed load (used for banding PL)\cr
\code{"mp"}: metabolic power\cr
\code{"pq"}: positional quality (percentage)\cr
\code{"ref"}: count of fix references (number of available satellites for GPS, number of anchors/receivers for LPS)\cr
\code{"hdop"}: horizontal dilution of precision (applicable to GPS only)\cr
\code{"face"}: the magnetic facing of the unit without compensation for declination (degrees)}

\item{field}{a list with venue details to use in conversion from \code{lat}, \code{long} into field \code{x} and \code{y} coordinates. By default, conversion will use the venue details as available from \code{\link{ofCloudGetActivities}}. Valid entries in the list are\cr
\code{centre_latitude}, \code{centre_longitude}: latitude and longitude of the venue,\cr 
\code{rotation}: rotation of the venue,\cr
\code{length}, \code{width}: length and width of the venue, used to offset the origin of the pitch in the 10 Hz data frame returned.\cr
All entries are optional. If supplied, an entry will override the corresponding value as available from \code{\link{ofCloudGetActivities}} or \code{\link{ofCloudGetActivity}}.}

\item{page_ordinal, page_size}{page ordinal number of size \emph{page_size} to return. \emph{page_ordinal} starts from 1. \emph{page_size} is in seconds. There could be a time jitters in 10 Hz series, so the number of records in a page might vary.}

\item{period_id}{period ID as returned by \code{\link{ofCloudGetPeriods}} or \code{\link{ofCloudGetActivities}}}

\item{athlete_ids}{a vector of athlete ids}
}
\value{
\code{ofCloudGetActivitySensorData / ofCloudGetPeriodSensorData / ofCloudGetMixedPeriodsActivitySensorData} returns 
either NULL if there are no data to return, or a list with some metadata and the 10 Hz sensor data (as a data frame 
in the list element \code{data[[1]]}); \code{stream_type} element of the returned list contains either \code{"gps"} or \code{"lps"}
values to indicate the stream type; in the case of \code{ofCloudGetMixedPeriodsActivitySensorData} \code{stream_type} contains 
\code{"mixed"} if the requested \code{from / to} interval contains mixed periods. 
The function throws if the HTTP response indicates failure. In particular, it throws \strong{404} if data was not synchronised, see an example in \code{\link{ofCloudParseError}}.

\code{ofCloudGetActivitySensorDataEx/ofCloudGetPeriodSensorDataEx} returns a list of lists with an entry for each athlete, 
with an entry name matching the athlete id, and the entry content matching
\code{ofCloudGetActivitySensorData/ofCloudGetPeriodSensorData} return value.
The function does not throw if a HTTP call fails for any athlete. \code{error} will be present in the returned list in an entry 
for an athlete with a failed call.
}
\description{
\code{ofCloudGetActivitySensorData} returns the 10 Hz sensor data for a given athlete(s) and a given activity,
assuming the athlete is mapped to the activity.
}
\section{Functions}{
\itemize{
\item \code{ofCloudGetPeriodSensorData}: get 10 Hz sensor and positional data for a given athlete and a given period,
assuming the athlete is mapped to the period.

\item \code{ofCloudGetActivitySensorDataEx}: get 10 Hz sensor and positional data for given athletes and a given activity,
assuming the athletes are mapped to the activity.

\item \code{ofCloudGetPeriodSensorDataEx}: get 10 Hz sensor and positional data for given athletes and a given period,
assuming the athletes are mapped to the period.

\code{ofCloudGetActivitySensorDataEx} and \code{ofCloudGetPeriodSensorDataEx} trigger one cloud API asynchronous call for each
given athlete without multithreading, outperforming a sequence of 
\code{ofCloudGetActivitySensorData / ofCloudGetPeriodSensorData} calls. 
However, using \code{dopar} from doParallel  package will achieve better performance, assuming
\code{parallel::makeCluster(Number_of_athletes, type='PSOCK')} context.

Be mindful not to overload the server with excessive number of requests. Keep the number of athlete IDs passed into
\code{ofCloudGetActivitySensorDataEx} and \code{ofCloudGetPeriodSensorDataEx} reasonable. 
Otherwise, the requests might be throttled on the server.

\item \code{ofCloudGetMixedPeriodsActivitySensorData}: get 10 Hz sensor and positional data for a given athlete and a given activity, treating
the activity as a mixed (dual stream) activity. A period must be tagged as either \emph{GPS} or \emph{LPS} in console for this feature to work.

A mixed (dual stream) activity contains periods from both, \code{gps} and \code{lps} streams. The periods with the stream
type different to the default activity stream type will be honoured by the function as long as the athlete is mapped 
to the period. If this is the case, the function fetches the positional data relevant to the period's stream type. 
As a result, the returned list element \code{data[[1]]} does not guarantee homogeneous 10 Hz time-stamps as returned 
in the \code{ts and cs} columns of the \code{data[[1]]}.
}}

\examples{
\dontrun{
x <- ofCloudGetActivitySensorData(credentials, athlete_id, activity_id)
data10Hz <- x$data[[1]]
streamType <- x$stream_type
}
}
\seealso{
Other cloud data access APIs: 
\code{\link{ofCloudGetActivityEfforts}()},
\code{\link{ofCloudGetActivityEvents}()}
}
\concept{cloud data access APIs}
