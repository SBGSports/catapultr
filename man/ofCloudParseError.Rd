% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ofCloud.R
\name{ofCloudParseError}
\alias{ofCloudParseError}
\title{parse an error from a failed cloud API}
\usage{
ofCloudParseError(err)
}
\arguments{
\item{err}{a error as caught by \code{trycatch} or with \code{purrr::safely()}}
}
\value{
\code{ofCloudParseError} returns a list with \code{status_code} and \code{message}.
}
\description{
\code{ofCloudParseError} is useful to distinguish between failures in the cloud APIs. Typically, a status code \strong{500}
is returned if there is a general failure. A status code \strong{404} is returned if data is not found, for example 
\code{ofCloudGetActivitySensorData} or \code{ofCloudGetPeriodSensorData} fails with 404 if data was not synchronised from
OpenField, or \code{ofCloudGetAthletesInActivity} or \code{ofCloudGetAthletesInPeriod} fails with 404 if athletes are not mapped 
to the specified activity or period.\cr
This function supplements \code{ofCredentials$getApiStatus()} and \code{ofCredentials$getApiMessage()} functions
}
\examples{
 # example 1 - a 'safe' function already provided by the package 
 result <- safe_ofCloudGetToken("APAC", "me", "mypassword", "main", "x", "y")
 if (!is.null(result$error))
 {
   ofCloudParseError(result$error)
   # alternatively, the status and message are available from the following,
   credentials <- result$result
   print(credentials$getApiStatus())
   print(credentials$getApiMessage())
 }
 # example 2 - using purrr::safely() to derive a 'safe' function 
 f <- purrr::safely(ofCloudGetAthletesInActivity)
 result <- f(credentials, id)
 # proceed as in the example 1 above
}
